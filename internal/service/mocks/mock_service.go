// Code generated by MockGen. DO NOT EDIT.
// Source: songlibrary/internal/service (interfaces: SongService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "songlibrary/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSongService is a mock of SongService interface.
type MockSongService struct {
	ctrl     *gomock.Controller
	recorder *MockSongServiceMockRecorder
}

// MockSongServiceMockRecorder is the mock recorder for MockSongService.
type MockSongServiceMockRecorder struct {
	mock *MockSongService
}

// NewMockSongService creates a new mock instance.
func NewMockSongService(ctrl *gomock.Controller) *MockSongService {
	mock := &MockSongService{ctrl: ctrl}
	mock.recorder = &MockSongServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongService) EXPECT() *MockSongServiceMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockSongService) AddSong(arg0 context.Context, arg1 *models.AddSongRequest) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", arg0, arg1)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSong indicates an expected call of AddSong.
func (mr *MockSongServiceMockRecorder) AddSong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockSongService)(nil).AddSong), arg0, arg1)
}

// DeleteSong mocks base method.
func (m *MockSongService) DeleteSong(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockSongServiceMockRecorder) DeleteSong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockSongService)(nil).DeleteSong), arg0, arg1)
}

// GetSongText mocks base method.
func (m *MockSongService) GetSongText(arg0 context.Context, arg1 int, arg2 *models.Pagination) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongText", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongText indicates an expected call of GetSongText.
func (mr *MockSongServiceMockRecorder) GetSongText(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongText", reflect.TypeOf((*MockSongService)(nil).GetSongText), arg0, arg1, arg2)
}

// GetSongs mocks base method.
func (m *MockSongService) GetSongs(arg0 context.Context, arg1 *models.SongFilter, arg2 *models.Pagination) ([]models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongs indicates an expected call of GetSongs.
func (mr *MockSongServiceMockRecorder) GetSongs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongs", reflect.TypeOf((*MockSongService)(nil).GetSongs), arg0, arg1, arg2)
}

// UpdateSong mocks base method.
func (m *MockSongService) UpdateSong(arg0 context.Context, arg1 *models.Song) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", arg0, arg1)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockSongServiceMockRecorder) UpdateSong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockSongService)(nil).UpdateSong), arg0, arg1)
}
