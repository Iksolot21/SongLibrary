// Code generated by MockGen. DO NOT EDIT.
// Source: songlibrary/internal/storage (interfaces: SongStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	models "songlibrary/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSongStorage is a mock of SongStorage interface.
type MockSongStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSongStorageMockRecorder
}

// MockSongStorageMockRecorder is the mock recorder for MockSongStorage.
type MockSongStorageMockRecorder struct {
	mock *MockSongStorage
}

// NewMockSongStorage creates a new mock instance.
func NewMockSongStorage(ctrl *gomock.Controller) *MockSongStorage {
	mock := &MockSongStorage{ctrl: ctrl}
	mock.recorder = &MockSongStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongStorage) EXPECT() *MockSongStorageMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockSongStorage) BeginTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockSongStorageMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockSongStorage)(nil).BeginTx), arg0)
}

// Create mocks base method.
func (m *MockSongStorage) Create(arg0 context.Context, arg1 *models.Song, arg2 *sql.Tx) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSongStorageMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSongStorage)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSongStorage) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSongStorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSongStorage)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockSongStorage) GetByID(arg0 context.Context, arg1 int) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSongStorageMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSongStorage)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockSongStorage) List(arg0 context.Context, arg1 *models.SongFilter, arg2 *models.Pagination) ([]models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSongStorageMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSongStorage)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockSongStorage) Update(arg0 context.Context, arg1 *models.Song) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSongStorageMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSongStorage)(nil).Update), arg0, arg1)
}
