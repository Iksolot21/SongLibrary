basePath: /
definitions:
  models.AddSongRequest:
    properties:
      group:
        type: string
      song:
        type: string
    type: object
  models.Song:
    properties:
      createdAt:
        type: string
      group:
        type: string
      id:
        type: integer
      link:
        description: swagger:strfmt uri
        type: string
      releaseDate:
        description: swagger:strfmt date-time
        type: string
      song:
        type: string
      text:
        description: swagger:strfmt string
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample online library API for songs.
  title: Online Library API
  version: "1.0"
paths:
  /health:
    get:
      description: Get the status of server.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show the status of server.
      tags:
      - root
  /songs:
    get:
      description: Get songs with optional filters for group and song name, and pagination.
      parameters:
      - description: Filter by group name
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of songs per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
      summary: Get songs with filtering and pagination
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Add a new song to the library, fetching details from external API.
      parameters:
      - description: Song details to add
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new song
      tags:
      - songs
  /songs/{id}:
    delete:
      description: Delete a song from the library.
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete song by ID
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update an existing song's details.
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Song'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update song by ID
      tags:
      - songs
  /songs/{id}/text:
    get:
      description: Get the text of a song by its ID, with pagination for verses.
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number for verses
        in: query
        name: page
        type: integer
      - default: 1
        description: Number of verses per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Song'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get song text by ID with pagination
      tags:
      - songs
schemes:
- http
swagger: "2.0"
